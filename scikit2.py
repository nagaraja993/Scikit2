# -*- coding: utf-8 -*-
"""Scikit2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K0q_4zxhkcEQSDyLb32Uj0ErAGay79VC

# Problem 1
"""

!pip install streamlit

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
import pickle
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
import streamlit
iris = load_iris()

X = iris.data
Y = iris.target

# train test split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

# create a linear regression model
classifier = RandomForestClassifier()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print('accuracy : ', metrics.accuracy_score(y_test, y_pred))

# pickling the model
import pickle
pickle_out = open("classifier.pkl", "wb")
pickle.dump(classifier, pickle_out)
pickle_out.close()

import pandas as pd
import numpy as np
import pickle
import streamlit as st
from PIL import Image

# loading in the model to predict on the data
pickle_in = open('classifier.pkl', 'rb')
classifier = pickle.load(pickle_in)

def welcome():
	return 'welcome all'

# defining the function which will make the prediction using
# the data which the user inputs
def prediction(sepal_length, sepal_width, petal_length, petal_width):

	prediction = classifier.predict(
		[[sepal_length, sepal_width, petal_length, petal_width]])
	print(prediction)
	return prediction


# this is the main function in which we define our webpage
def main():
	# giving the webpage a title
	st.title("Iris Flower Prediction using RF")

	# here we define some of the front end elements of the web page like
	# the font and background color, the padding and the text to be displayed
	html_temp = """
	<div style ="background-color:yellow;padding:13px">
	<h1 style ="color:black;text-align:center;">Streamlit Iris Flower Classifier ML App </h1>
	</div>
	"""

	# this line allows us to display the front end aspects we have
	# defined in the above code
	st.markdown(html_temp, unsafe_allow_html = True)

	# the following lines create text boxes in which the user can enter
	# the data required to make the prediction
	sepal_length = st.text_input("Sepal Length", "Type Here")
	sepal_width = st.text_input("Sepal Width", "Type Here")
	petal_length = st.text_input("Petal Length", "Type Here")
	petal_width = st.text_input("Petal Width", "Type Here")
	result =""

	# the below line ensures that when the button called 'Predict' is clicked,
	# the prediction function defined above is called to make the prediction
	# and store it in the variable result
	if st.button("Predict"):
		result = prediction(sepal_length, sepal_width, petal_length, petal_width)
	st.success('The output is {}'.format(result))

if __name__=='__main__':
	main()

!streamlit run /usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py

"""# Problem 2"""

# https://teachablemachine.withgoogle.com/train/image
# Looked at the link and played with it

"""# Problem 3"""

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
import pickle
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
iris = load_iris()

X = iris.data
Y = iris.target

# train test split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

# Set the n_components=3
principal=PCA(n_components=2)
principal.fit(X_train)
X_train=principal.transform(X_train)
X_test=principal.transform(X_test)

# create a linear regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# save the model
filename = 'linear_model.sav'
pickle.dump(regressor, open(filename, 'wb'))

# load the model
load_model = pickle.load(open(filename, 'rb'))

y_pred = load_model.predict(X_test)
print('root mean squared error : ', np.sqrt(
	metrics.mean_squared_error(y_test, y_pred)))

"""# Problem 4"""

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
import pickle
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris
iris = load_iris()

X = iris.data
Y = iris.target

# train test split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

pipe = Pipeline([('pca', PCA(n_components = 2)), ('scalar', StandardScaler()), ('model', LinearRegression())])
pipe.fit(X_train, y_train)
y_pred = pipe.predict(X_test)
print('root mean squared error : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

